string

#include <string>


类型定义
string::traits_type
string::value_type
string::size_type
string::difference_type
string::reference
string::const_reference
string::pointer
string::const_pointer
string::iterator
string::const_iterator
string::reverse_iterator
string::const_reverse_iterator



创建、复制、销毁(create, copy, and destroy)
string::string()
string::string(const string& str)
string::string(string&& str)
string::string(const string& str, size_type str_idx)
string::string(const string& str, size_type str_idx, size_type str_num)
string::string(const char* cstr)
string::string(const char* cstr, size_type chars_len)
string::string(size_type num, char c)
string::string(InputIterator beg, InputIterator end)
string::string(initializer-list)

string::~string()



大小和容量(size and capacity)
bool string::empty() const
size_type string::size() const
size_type string::length() const
size_type string::max_size() const

size_type string::capacity() const
void string::reserve()
void string::reserve(size_type num)
void string::shrink_to_fit()



比较(comparison)
bool comparison(const string& str1, const string& str2)
bool comparison(const string& str, const char* cstr)
bool comparison(const char* cstr, const string& str)

comparison 可以是以下任何一种动作
    operator ==
    operator !=
    operator <
    operator >
    operator <=
    operator >=

int string::compare(const string& str) const
int string::compare(size_type idx, size_type len, const string& str) const
int string::compare(size_type idx, size_type len, const string& str, size_type str_idx, size_type str_len) const
int string::compare(const char* cstr) const
int string::compare(size_type idx, size_type len, const char* cstr) const
int string::compare(size_type idx, size_type len, const char* chars, size_type chars_len) const



字符访问
char& string::operator[](size_type idx)
const char& string::operator[](size_type idx) const
char& string::at(size_type idx)
const char& string::at(size_type idx) const
char& string::front()
const char& string::front() const
char& string::back()
const char& string::back() const



产生 C-String 和字符数组(character array)
const char* string::c_str() const
const char* string::data() const
size_type string::copy(char* buf, size_type buf_size) const
size_type string::copy(char* buf, size_type buf_size, size_type idx) const



赋值
string& string::operator=(const string& str)
string& string::assign(const string& str)
string& string::operator=(string&& str)
string& string::assign(string&& str)
string& string::assign(const string& str, size_type str_idx, size_type str_num)
string& string::operator=(const char* cstr)
string& string::assign(const char* cstr)
string& string::assign(const char* chars, size_type chars_len)
string& string::operator=(char c)
string& string::assign(size_type num, char c)
string& string::assign(InputIterator beg, InputIterator end)
string& string::operator=(initializer-list)
string& string::assign(initializer-list)
void string::swap(string& str)
void swap(string& str1, string& str2)



添加字符
string& string::operator+=(const string& str)
string& string::append(const string& str)
string& string::append(const string& str, size_type str_idx, size_type str_num)
string& string::operator+=(const char* cstr)
string& string::append(const char* cstr)
string& string::append(const char* chars, size_type chars_len)
string& string::append(size_type num, char c)
string& string::operator+=(char c)
void string::push_back(char c)
string& string::append(InputIterator beg, InputIterator end)
string& string::operator+=(initializer-list)
void string::append(initializer-list)



安插字符
string& string::insert(size_type idx, const string& str)
string& string::insert(size_type idx, const string& str, size_type str_idx, size_type str_num)
string& string::insert(size_type idx, const char* cstr)
string& string::insert(size_type idx, const char* chars, size_type chars_len)
string& string::insert(size_type idx, size_type num, char c)
iterator string::insert(const_iterator pos, size_type num, char c)
iterator string::insert(const_iterator pos, char c)
iterator string::insert(const_iterator pos, InputIterator beg, InputIterator end)
iterator string::insert(const_iterator pos, initializer-list)



抹除字符(erasing character)
void string::clear()
string& string::erase()
string& string::erase(size_type idx)
string& string::erase(size_type idx, size_type len)
iterator string::erase(const_iterator pos)
iterator string::erase(const_iterator beg, const_iterator end)
void string::pop_back()



改变大小
void string::resize(size_type num)
void string::resize(size_type num, char c)



替换字符(replacing character)
string& string::replace(size_type idx, size_type len, const string& str)
string& string::replace(begin_iterator beg, begin_iterator end, const string& str)
string& string::replace(size_type idx, size_type len, const string& str, size_type str_idx, size_type str_num)
string& string::replace(size_type idx, size_type len, const char* cstr)
string& string::replace(const_iterator beg, const_iterator end, const char* cstr)
string& string::replace(size_type idx, size_type len, const char* chars, size_type chars_len)
string& string::replace(const_iterator beg, const_iterator end, const char* chars, size_type chars_len)
string& string::replace(size_type idx, size_type len, size_type num, char c)
string& string::replace(const_iterator beg, const_iterator end, size_type num, char c)
string& string::replace(const_iterator beg, const_iterator end, InputIterator newBeg, InputIterator newEnd)
string& string::replace(const_iterator beg, const_iterator end, initializer-list)



查找单一字符(find a character)
size_type string::find(char c) const
size_type string::find(char c, size_type idx) const
size_type string::rfind(char c) const
size_type string::rfind(char, size_type idx) const



查找子字符串(find a substring)
size_type string::find(const string& str) const
size_type string::find(const string& str, size_type idx) const
size_type string::rfind(const string& str) const
size_type string::rfind(const string& str, size_type idx) const

size_type string::find(const char* cstr) const
size_type string::find(const char* cstr, size_type idx) const
size_type string::rfind(const char* cstr) const
size_type string::rfind(const char* cstr, size_type idx) const

size_type string::find(const char* chars, size_type idx, size_type chars_len) const
size_type string::rfind(const char* chars, size_type idx, size_type chars_len) const



查找第一个符合条件的字符
size_type string::find_first_of(const string& str) const
size_type string::find_first_of(const string& str, size_type idx) const
size_type string::find_first_not_of(const string& of) const
size_type string::find_first_not_of(const string& str, size_type idx) const

size_type string::find_first_of(const char* cstr) const
size_type string::find_first_of(const char* cstr, size_type idx) const
size_type string::find_first_not_of(const char* cstr) const
size_type string::find_first_not_of(const char* cstr, size_type idx) const

size_type string::find_first_of(const char* chars, size_type idx, size_type chars_len) const
size_type string::find_first_not_of(const char* chars, size_type idx, size_type chars_len) const

size_type string::find_first_of(char c) const
size_type string::find_first_of(char c, size_type idx) const
size_type string::find_first_not_of(char c) const
size_type string::find_first_not_of(char c, size_type idx) const




查找最后一个符合条件的字符
size_type string::find_last_of(const string& str) const
size_type string::find_last_of(const string& str, size_type idx) const
size_type string::find_last_not_of(const string& of) const
size_type string::find_last_not_of(const string& str, size_type idx) const

size_type string::find_last_of(const char* cstr) const
size_type string::find_last_of(const char* cstr, size_type idx) const
size_type string::find_last_not_of(const char* cstr) const
size_type string::find_last_not_of(const char* cstr, size_type idx) const

size_type string::find_last_of(const char* chars, size_type idx, size_type chars_len) const
size_type string::find_last_not_of(const char* chars, size_type idx, size_type chars_len) const

size_type string::find_last_of(char c) const
size_type string::find_last_of(char c, size_type idx) const
size_type string::find_last_not_of(char c) const
size_type string::find_last_not_of(char c, size_type idx) const



子字符串及字符串接合
string string::substr() const
string string::substr(size_type idx) const
string string::substr(size_type idx, size_type len) const

string operator+(const string& str1, const string& str2)
string operator+(string&& str1, string&& str2)
string operator+(string&& str1, const string& str2)
string operator+(const string& str1, string&& str2)
string operator+(const string& str, const char* cstr)
string operator+(string&& str, const char* cstr)
string operator+(const char* cstr, const string& str)
string operator+(const char* cstr, string&& str)
string operator+(const string&, char c)
string operator+(string&& str, char c)
string operator+(char c, const string& str)
string operator+(char c, string&& str)



I/O函数
ostream& operator<<(ostream&& strm, const string& str)
istream& operator>>(istream&& strm, string& str)

istream getline(istream& strm, string& str)
istream getline(istream&& strm, string& str)
istream getline(istream& strm, string& str, char delim)
istream getline(istream&& strm, string& str, char delim)



数值转换(numeric conversion)
int stoi(const string& str, size_t* idxRet = nullptr, int base = 10)
int stol(const string& str, size_t* idxRet = nullptr, int base = 10)
int stoul(const string& str, size_t* idxRet = nullptr, int base = 10)
int stoll(const string& str, size_t* idxRet = nullptr, int base = 10)
int stoull(const string& str, size_t* idxRet = nullptr, int base = 10)
int stof(const string& str, size_t* idxRet = nullptr, int base = 10)
int stod(const string& str, size_t* idxRet = nullptr, int base = 10)
int stold(const string& str, size_t* idxRet = nullptr, int base = 10)

string to_string(Type val)
wstring to_wstring(Type val)



生产iterator
iterator string::begin()
const_iterator string::begin() const
const_iterator string::cbegin()

iterator string::end()
const_iterator string::end() const
const_iterator string::cend()

iterator string::rbegin()
const_iterator string::rbegin() const
const_iterator string::rcbegin()

iterator string::rend()
const_iterator string::rend() const
const_iterator string::rcend()
