vector

#include <vector>

操作                                           效果
vector<Elem> c                                     default构造函数，建立一个空vector
vector<Elem> c(c2)                                 copy构造函数
vector<Elem> c = c2
vector<Elem> c(rv)                                 move构造函数
vector<Elem> c = rv
vector<Elem> c(n)                                 default构造生成一个大小为n的vector
vector<Elem> c(n, elem)                                 建立一个大小为n的vector,每个元素值都是elem
vector<Elem> c(beg, end)                           以[beg, end)区间作为初值
vector<Elem> c(initlist)
vector<Elem> c = initlist

c.~vector()                                  销毁所有元素，释放内存
c.empty()
c.size()                                       返回目前的元素个数
c.max_size()                                   返回元素的最大可能数量
c.capacity()                                      返回"不进行空间重新分配"条件下的元素最大容纳量
c.reserve(num)                                如果容量不足，扩大之
c1 == c2
c1 != c2
c1 < c2
c1 > c2
c1 <= c2
c1 >= c2

c = c2                                         将c2的所有元素赋值给c
c = rv                                         将 rvalue rv 以 move assign 方式赋予c

c = initlist
c.assign(n, elem)                              复制n个elem，赋值给c
c.assign(beg, end)                            将区间[beg, end)内的元素赋给c
c.assign(initlist)
c1.swap(c2)
swap(c1, c2)


c[idx]                                       返回索引idx所指的元素(不检查范围)
c.at(idx)                                   返回索引idx所指的元素(如果idx超出范围就抛出range-error异常)
c.front()                                   返回第一元素(不检查是否存在第一元素)
c.back()                                   返回最末元素(不检查是否存在最末元素)

c.begin()
c.end()
c.cbegin()
c.cend()
c.rbegin()
c.rend()
c.crbegin()
c.crend()

c.push_back(elem)
c.pop_back()                                  移除最后一个元素，但不返回它
c,insert(pos, elem)                           在pos的前方插入elem的拷贝，并返回新元素的位置
c.insert(pos, n, elem)                        在pos的前方插入n个elem拷贝，并返回第一个新元素的位置(或返回pos--如果没有新元素的话)
c.insert(pos, beg, end)
c.insert(pos, initlist)
c.emplace(pos, args...)
c.emplace_back(args...)                          附加一个以args为初值的元素于末尾，不返回任何东西
c.erase(pos)                                  移除pos上的元素，返回下一元素的位置
c.erase(beg, end)                             移除区间[beg, end)内的所有元素，返回下一元素的位置
c.resize(num)                                  将元素数量改为num(如果size()变大，多出来的新元素都以default构造函数完成初始化)
c.resize(num, elem)                            将元素数量改为num(如果size()变大，多出来的新元素都是elem的拷贝)

c.clear()                                      移除所有元素，令容器为空
