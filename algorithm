#include <algorithm>

for_each

UnaryProc for_each(InputIterator beg, InputIterator end, UnaryProc op);

-------------------------------------------------------------------------------------------------------------------------
                                                    非更异型算法
元素计数
difference_type
count(InputIterator beg, InputIterator end, const T& value)

difference_type
count_if(InputIterator beg, InputIterator end, UnaryPredicate op)



最大值和最小值
ForwardIterator
min_element(ForwardIterator beg, ForwardIterator end)

ForwardIterator
min_element(ForwardIterator beg, ForwardIterator end, CompFunc op)

ForwardIterator
max_element(ForwardIterator beg, ForwardIterator end)

ForwardIterator
max_element(ForwardIterator beg, ForwardIterator end, CompFunc op)

pair<ForwardIterator, ForwardIterator>
minmax_element(ForwardIterator beg, ForwardIterator end)

pair<ForwardIterator, ForwardIterator>
minmax_element(ForwardIterator beg, ForwardIterator end, CompFunc op)



查找第一个匹配元素
InputIterator
find(InputIterator beg, InputIterator end, const T& value)

InputIterator
find_if(InputIterator beg, InputIterator end, UnaryPredicate op)

InputIterator
find_if_not(InputIterator beg, InputIterator end, UnaryPredicate op)



查找前n个连续匹配值
ForwardIterator
search_n(ForwardIterator beg, ForwardIterator end, Size count, const T& value)

ForwardIterator
search_n(ForwardIterator beg, ForwardIterator end, Size count, const T& value, BinaryPredicate op)
连续count个元素造成 op(elem, value)为true的第一元素位置



查找第一个子区间
ForwardIterator
search(ForwardIterator1 beg, ForwardIterator1 end,
       ForwardIterator2 searchBeg, ForwardIterator2 searchEnd)

ForwardIterator
search(ForwardIterator1 beg, ForwardIterator1 end,
       ForwardIterator2 searchBeg, ForwardIterator2 searchEnd,
       BinaryPredicate op)
op(elem, searchElem)



查找最后一个子区间
ForwardIterator
find_end(ForwardIterator1 beg, ForwardIterator1 end,
       ForwardIterator2 searchBeg, ForwardIterator2 searchEnd)

ForwardIterator
find_end(ForwardIterator1 beg, ForwardIterator1 end,
       ForwardIterator2 searchBeg, ForwardIterator2 searchEnd,
       BinaryPredicate op)
op(elem, searchElem)



查找某些元素的第一次出现地点
InputIterator
find_first_of(InputIterator beg, InputIterator end,
              ForwardIterator searchBeg, ForwardIterator searchEnd)

InputIterator
find_first_of(InputIterator beg, InputIterator end,
              ForwardIterator searchBeg, ForwardIterator searchEnd,
              BinaryPredicate op)



查找两个连续且相等的元素
ForwardIterator
adjacent_find(ForwardIterator beg, ForwardIterator end)

ForwardIterator
adjacent_find(ForwardIterator beg, ForwardIterator end,
              BinaryPredicate op)



检验相等性
bool
equal(InputIterator beg, InputIterator end,
      InputIterator cmpBeg)

bool
equal(InputIterator beg, InputIterator end,
      InputIterator cmpBeg,
      BinaryPredicate op)
op(elem, cmpElem)



测试不定序之相等性
bool
is_permutation(ForwardIterator1 beg1, ForwardIterator1 end1,
               ForwardIterator2 beg2)

bool
is_permutation(ForwardIterator1 beg1, ForwardIterator1 end1,
               ForwardIterator2 beg2,
               CompFunc op)



查找第一处不同
pair<InputIterator1, InputIterator2>
mismatch(InputIterator1 beg, InputIterator1 end,
         InputIterator2 cmpBeg)

pair<InputIterator1, InputIterator2>
mismatch(InputIterator1 beg, InputIterator1 end,
         InputIterator2 cmpBeg,
         BinaryPredicate op)
op(elem, cmpElem)



检验是否排序(或局部排序)
bool
is_sorted(ForwardIterator beg, ForwardIterator end)

bool
is_sorted(ForwardIterator beg, ForwardIterator end, BinaryPredicate op)

ForwardIterator
is_sorted_until(ForwardIterator beg, ForwardIterator end)                        //返回[beg, end)区间内第一个破坏排序的元素

ForwardIterator
is_sorted_until(ForwardIterator beg, ForwardIterator end, BinaryPredicate op)
op(elem1, elem2)



检验All, Any, 或None
bool
all_of(InputIterator beg, InputIterator end, UnaryPredicate op)

bool
any_of(InputIterator beg, InputIterator end, UnaryPredicate op)

bool
none_of(InputIterator beg, InputIterator end, UnaryPredicate op)


---------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                更易型算法

复制元素
OutputIterator
copy(InputIterator sourceBeg, InputIterator sourceEnd,
     OutputIterator destBeg)

OutputIterator
copy_if(InputIterator sourceBeg, InputIterator sourceEnd,
        OutputIterator destBeg,
        UnaryPredicate op)

OutputIterator
copy_n(InputIterator sourceBeg, Size num, OutputIterator destBeg)

BidirectionalIterator2
copy_backward(BidirectionalIterator1 sourceBeg, BidirectionalIterator1 sourceEnd, BidirectionalIterator2 destEnd)



搬移元素(Moving Element)
OutputIterator
move(InputIterator sourceBeg, InputIterator sourceEnd,
     OutputIterator destBeg)

BidirectionalIterator2
move_backward(BidirectionalIterator1 sourceBeg, BidirectionalIterator1 sourceEnd, BidirectionalIterator2 destEnd)



转换元素(Transforming Element)
OutputIterator
transform(InputIterator sourceBeg, InputIterator sourceEnd,
          OutputIterator destBeg,
          UnaryFunc op)


将两序列的元素结合(Combining Elements of Two Sequences)
OutputIterator
transform(InputIterator1 source1Beg, InputIterator1 source1End,
          InputIterator2 source2Beg,
          OutputIterator destBeg,
          BinaryFunc op)
op(source1Elem, source2Elem)



互换元素(Swapping Elements)
ForwardIterator2
swap_ranges(ForwardIterator1 beg1, ForwardIterator1 end1,
            ForwardIterator2 beg2)



赋予相同数值(Assigning the Same Value)
void
fill(ForwardIterator beg, ForwardIterator end,
     const T& newValue)

void
fill_n(OutputIterator beg, Size num,
       const T& newValue)



赋予新生值
void
generate(ForwardIterator beg, ForwardIterator end,
         Func op)

void
generate_n(OutputIterator beg, Size num,
           Func op)



赋予一系列递增值
void
iota(ForwardIterator beg, ForwardIterator end,
     T startValue)
依序赋值 startValue, startValue+1, startValue+2



替换序列内的元素
void
replace(ForwardIterator beg, ForwardIterator end,
        const T& oldValue, const T& newValue)

void
replace_if(ForwardIterator beg, ForwardIterator end,
           UnaryPredicate op, const T& newValue)



赋值并替换元素
OutputIterator
replace_copy(InputIterator sourceBeg, InputIterator sourceEnd,
             OutputIterator destBeg,
             const T& oldValue, const T& newValue)

OutputIterator
replace_copy_if(InputIterator sourceBeg, InputIterator sourceEnd,
                OutputIterator destBeg,
                UnaryPredicate op, const T& newValue)



移除序列内的元素
ForwardIterator
remove(ForwardIterator beg, ForwardIterator end,
       const T& value)

ForwardIterator
remove_if(ForwardIterator beg, ForwardIterator end,
          UnaryPredicate op)



赋值时一并移除元素
OutputIterator
remove_copy(InputIterator sourceBeg, InputIterator sourceEnd,
            OutputIterator destBeg,
            const T& value)

OutputIterator
remove_copy_if(InputIterator sourceBeg, InputIterator sourceEnd,
               OutputIterator destBeg,
               UnaryPredicate op)



移除连续重复元素
ForwardIterator
unique(ForwardIterator beg, ForwardIterator end)

ForwardIterator
unique(ForwardIterator beg, ForwardIterator end,
       BinaryPredicate op)



赋值过程中移除重复元素
OutputIterator
unique_copy(InputIterator sourceBeg, InputIterator sourceEnd,
            OutputIterator destBeg)

OutputIterator
unique_copy(InputIterator sourceBeg, InputIterator sourceEnd,
            OutputIterator destBeg,
            BinaryPredicate op)



反转元素次序
void
reverse(BidirectionalIterator beg, BidirectionalIterator end)

OutputIterator
reverse_copy(BidirectionalIterator sourceBeg, BidirectionalIterator sourceEnd,
             OutputIterator destBeg)



旋转序列内的元素
ForwardIterator
rotate(ForwardIterator beg, ForwardIterator newBeg, ForwardIterator end)



复制并同时旋转元素
OutputIterator
rotate_copy(ForwardIterator sourceBeg, ForwardIterator newBeg,
            ForwardIterator sourceEnd,
            OutputIterator destBeg)



将元素向前搬
ForwardIterator
partition(ForwardIterator beg, ForwardIterator end,
          UnaryPredicate op)

BidirectionalIterator
stable_partition(BidirectionalIterator beg, BidirectionalIterator end,
                 UnaryPredicate op)



划分为两个子区间
pair<OutputIterator1, OutputIterator2>
partition_copy(InputIterator sourceBeg, InputIterator sourceEnd,
               OutputIterator1 destTrueBeg, OutputIterator2 destFalseBeg,
               UnaryPredicate op)



-------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                    排序算法

对所有元素排序
void
sort(RandomAccessIterator beg, RandomAccessIterator end)

void
sort(RandomAccessIterator beg, RandomAccessIterator end, BinaryPredicate op)

void
stable_sort(RandomAccessIterator beg, RandomAccessIterator end)

void
stable_sort(RandomAccessIterator beg, RandomAccessIterator end, BinaryPredicate op)



局部排序
void
partial_sort(RandomAccessIterator beg, RandomAccessIterator sortEnd,
             RandomAccessIterator end)

void
partial_sort(RandomAccessIterator beg, RandomAccessIterator sortEnd,
             RandomAccessIterator end, BinaryPredicate op)

RandomAccessIterator
partial_sort_copy(InputIterator sourceBeg, InputIterator sourceEnd,
                  RandomAccessIterator destBeg, RandomAccessIterator destEnd)

RandomAccessIterator
partial_sort_copy(InputIterator sourceBeg, InputIterator sourceEnd,
                  RandomAccessIterator destBeg, RandomAccessIterator destEnd,
                  BinaryPredicate op)


------------------------------------------------------------------------------------------------------------------------------------------------
                                                                        已排序区间算法


查找某个元素是否存在
bool
binary_search(ForwardIterator beg, ForwardIterator end, const T& value)

bool
binary_search(ForwardIterator beg, ForwardIterator end, const T& value,
              BinaryPredicate op)



检查数个元素是否存在
bool
includes(InputIterator1 beg, InputIterator1 end,
         InputIterator2 searchBeg, InputIterator2 searchEnd)

bool
includes(InputIterator1 beg, InputIterator1 end,
         InputIterator2 searchBeg, InputIterator2 searchEnd,
         BinaryPredicate op)



查找第一个或最后一个可能位置
ForwardIterator
lower_bound(ForwardIterator beg, ForwardIterator end, const T& value)

ForwardIterator
lower_bound(ForwardIterator beg, ForwardIterator end, const T& value,
            BinaryPredicate op)

ForwardIterator
upper_bound(ForwardIterator beg, ForwardIterator end, const T& value)

ForwardIterator
upper_bound(ForwardIterator beg, ForwardIterator end, const T& value,
            BinaryPredicate op)



查找第一个和最后一个可能位置所形成的区间
pair<ForwardIterator, ForwardIterator>
equal_range(ForwardIterator beg, ForwardIterator end, const T& value)

pair<ForwardIterator, ForwardIterator>
equal_range(ForwardIterator beg, ForwardIterator end, const T& value,
            BinaryPredicate op)
